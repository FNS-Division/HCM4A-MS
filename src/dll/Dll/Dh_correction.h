//!
//!	Dh_Correction.f90								
//!														
//!
//!	Subroutine to calculate the correction factor according terrain
//!	irregularity 'CDH'.
//!
//!
//!	Input values:
//!				Dh			Delta-h (terrain irregularity) in m
//!				Distance    Distance in km
//!				Frequency	Transmitter frequency in MHz
//!
//!
//!	Output values:
//!				Dh_corr		Correction factor according terrain irregularity

	
#ifndef _DhCorreH
#define _DhCorreH
#include <iostream>
#include <cmath>

// Function to calculate the correction factor according to terrain irregularity 'CDH'
void DhCorrection(double dh, double distance, double frequency, double& dh_corr) {
    if ((distance < 10.0) || (dh == 50.0)) {
        dh_corr = 0.0;
        return;
    }

    double a = dh;
    if (dh <= 10.0) a = 10.0;
    if (dh >= 500.0) a = 500.0;

    int f_inf, f_sup;
    if (frequency <= 600.0) {
        f_inf = 100;
        f_sup = 600;
    } else {
        f_inf = 600;
        f_sup = 2000;
    }

    double a1_100 = 0.0, a2_100 = 0.0;
    double a1_600 = 0.0, a2_600 = 0.0;
    double a1_2000 = 0.0, a2_2000 = 0.0;

    if (f_inf == 100) {
        if (distance < 200.0) {
            if (a <= 20.0) a1_100 = (a - 10.0) * 0.3 - 7.0;
            if ((a > 20.0) && (a <= 30.0)) a1_100 = (a - 30.0) * 0.15 - 2.5;
            if ((a > 30.0) && (a <= 50.0)) a1_100 = (a - 50.0) * 0.125;
            if ((a > 50.0) && (a <= 80.0)) a1_100 = (a - 80.0) * 0.1 + 3.0;
            if ((a > 80.0) && (a <= 100.0)) a1_100 = (a - 100.0) * 0.1 + 5.0;
            if ((a > 100.0) && (a <= 150.0)) a1_100 = (a - 150.0) * 0.06 + 8.0;
            if ((a > 150.0) && (a <= 300.0)) a1_100 = (a - 300.0) * 0.04 + 14.0;
            if (a > 300.0) a1_100 = (a - 500.0) * 0.025 + 19.0;
        }
        if (distance >= 200.0) {
            if (a <= 20.0) a2_100 = (a - 20.0) * 0.1 - 2.0;
            if ((a > 20.0) && (a <= 30.0)) a2_100 = (a - 30.0) * 0.05 - 1.5;
            if ((a > 30.0) && (a <= 50.0)) a2_100 = (a - 50.0) * 0.075;
            if ((a > 50.0) && (a <= 80.0)) a2_100 = (a - 80.0) * 0.067 + 2.0;
            if ((a > 80.0) && (a <= 100.0)) a2_100 = (a - 100.0) * 0.05 + 3.0;
            if ((a > 100.0) && (a <= 150.0)) a2_100 = (a - 150.0) * 0.03 + 4.5;
            if ((a > 150.0) && (a <= 300.0)) a2_100 = (a - 300.0) * 0.0167 + 7.0;
            if (a > 300.0) a2_100 = (a - 500.0) * 0.0125 + 9.5;
        }
    }

    if ((f_inf == 600) || (f_sup == 600)) {
        if (distance < 200.0) {
            if (a <= 20.0) a1_600 = (a - 10.0) * 0.4 - 10.0;
            if ((a > 20.0) && (a <= 30.0)) a1_600 = (a - 30.0) * 0.3 - 3.0;
            if ((a > 30.0) && (a <= 50.0)) a1_600 = (a - 50.0) * 0.15;
            if ((a > 50.0) && (a <= 80.0)) a1_600 = (a - 80.0) * 0.133 + 4.0;
            if ((a > 80.0) && (a <= 100.0)) a1_600 = (a - 100.0) * 0.15 + 7.0;
            if ((a > 100.0) && (a <= 150.0)) a1_600 = (a - 150.0) * 0.06 + 10.0;
            if ((a > 150.0) && (a <= 300.0)) a1_600 = (a - 300.0) * 0.067 + 20.0;
            if (a > 300.0) a1_600 = (a - 500.0) * 0.04 + 28.0;
        }
        if (distance >= 200.0) {
            if (a <= 20.0) a2_600 = (a - 20.0) * 0.2 - 3.0;
            if ((a > 20.0) && (a <= 30.0)) a2_600 = (a - 30.0) * 0.1 - 2.0;
            if ((a > 30.0) && (a <= 50.0)) a2_600 = (a - 50.0) * 0.1;
            if ((a > 50.0) && (a <= 80.0)) a2_600 = (a - 80.0) * 0.067 + 2.0;
            if ((a > 80.0) && (a <= 100.0)) a2_600 = (a - 100.0) * 0.075 + 3.5;
            if ((a > 100.0) && (a <= 150.0)) a2_600 = (a - 150.0) * 0.03 + 5.0;
            if ((a > 150.0) && (a <= 300.0)) a2_600 = (a - 300.0) * 0.033 + 10.0;
            if (a > 300.0) a2_600 = (a - 500.0) * 0.015 + 13.0;
        }
    }

    if (f_sup == 2000) {
        if (distance < 200.0) {
            if (a <= 20.0) a1_2000 = (a - 10.0) * 0.4 - 10.0;
            if ((a > 20.0) && (a <= 30.0)) a1_2000 = (a - 30.0) * 0.3 - 3.0;
            if ((a > 30.0) && (a <= 50.0)) a1_2000 = (a - 50.0) * 0.15;
            if ((a > 50.0) && (a <= 80.0)) a1_2000 = (a - 80.0) * 0.1667 + 5.0;
            if ((a > 80.0) && (a <= 100.0)) a1_2000 = (a - 100.0) * 0.185 + 8.7;
            if ((a > 100.0) && (a <= 150.0)) a1_2000 = (a - 150.0) * 0.074 + 12.4;
            if ((a > 150.0) && (a <= 300.0)) a1_2000 = (a - 300.0) * 0.082667 + 24.8;
            if (a > 300.0) a1_2000 = (a - 500.0) * 0.0495 + 34.7;
        }
        if (distance >= 200.0) {
            if (a <= 20.0) a2_2000 = (a - 20.0) * 0.2 - 3.0;
            if ((a > 20.0) && (a <= 30.0)) a2_2000 = (a - 30.0) * 0.1 - 2.0;
            if ((a > 30.0) && (a <= 50.0)) a2_2000 = (a - 50.0) * 0.1;
            if ((a > 50.0) && (a <= 80.0)) a2_2000 = (a - 80.0) * 0.08333 + 2.5;
            if ((a > 80.0) && (a <= 100.0)) a2_2000 = (a - 100.0) * 0.09 + 4.3;
            if ((a > 100.0) && (a <= 150.0)) a2_2000 = (a - 150.0) * 0.038 + 6.2;
            if ((a > 150.0) && (a <= 300.0)) a2_2000 = (a - 300.0) * 0.041333 + 12.4;
            if (a > 300.0) a2_2000 = (a - 500.0) * 0.0185 + 16.1;
        }
    }

    double c100, c600, c2000;
    if (distance <= 50.0) {
        c100 = a1_100 * (distance - 10.0) / 40.0;
        c600 = a1_600 * (distance - 10.0) / 40.0;
        c2000 = a1_2000 * (distance - 10.0) / 40.0;
    } else if ((distance > 50.0) && (distance <= 100.0)) {
        c100 = a1_100;
        c600 = a1_600;
        c2000 = a1_2000;
    } else if ((distance > 100.0) && (distance <= 200.0)) {
        c100 = a2_100 - (distance - 200.0) * (a1_100 - a2_100) / 100.0;
        c600 = a2_600 - (distance - 200.0) * (a1_600 - a2_600) / 100.0;
        c2000 = a2_2000 - (distance - 200.0) * (a1_2000 - a2_2000) / 100.0;
    } else {
        c100 = a2_100;
        c600 = a2_600;
        c2000 = a2_2000;
    }

    if ((f_inf == 100) && (f_sup == 600)) {
        dh_corr = c100 + (c600 - c100) * std::log10(frequency / 100.0) / std::log10(600.0 / 100.0);
    } else if ((f_inf == 600) && (f_sup == 2000)) {
        dh_corr = c600 + (c2000 - c600) * std::log10(frequency / 600.0) / std::log10(2000.0 / 600.0);
    }
}


#endif